{ config, pkgs, lib, ... }:

let
  ros = import (
    builtins.fetchTarball https://github.com/lopsided98/nix-ros-overlay/archive/master.tar.gz
  ) {};
  fromGitHub = ref: repo: pkgs.vimUtils.buildVimPlugin {
    pname = "${lib.strings.sanitizeDerivationName repo}";
    version = ref;
    src = builtins.fetchGit {
      url = "https://github.com/${repo}.git";
      ref = ref;
    };
  };
in
{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "{{.chezmoi.username}}";
  home.homeDirectory = "{{.chezmoi.homeDir}}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "23.11"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = [
    pkgs.htop
    pkgs.zsh
    pkgs.xclip
    pkgs.mosh
    pkgs.waypipe
    pkgs.pwgen
    pkgs.chezmoi
    pkgs.git
    pkgs.neovim-remote
    pkgs.pipx
    pkgs.rclone
    pkgs.pyright

    pkgs.logseq
    pkgs.wl-clipboard
    pkgs.nextcloud-client
    pkgs.vscodium
    pkgs.inkscape
    pkgs.gimp
    pkgs.krita
    pkgs.qgroundcontrol

    pkgs.signal-desktop
    pkgs.element-desktop


    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    #This script lets us work with stuff where we need wait for vim to 
    # exit, like `git commit`
    (pkgs.writeShellScriptBin "nvr-edit" ''
      neovim-remote --remote-wait $@
    '')
  ];

  programs.zsh = {
    enable = true;
    enableCompletion = true;
    enableAutosuggestions = true;
    syntaxHighlighting.enable = true;

    history.size = 10000;
    history.path = "${config.xdg.dataHome}/zsh/history";
    oh-my-zsh = {
      enable = true;
      plugins = [ "git" "docker" "docker-compose"];
      theme = "robbyrussell";
    };
    initExtra = ''
    if [[ -n ''${NVIM+x} ]]; then
      alias vim="neovim-remote --remote"
      export EDITOR=nvr-edit
    fi
    '';
  };


  programs.neovim = {
    enable = true;
    defaultEditor = true;
    viAlias = true;
    vimAlias = true;
    vimdiffAlias = true;
    plugins = with pkgs.vimPlugins; [
      nvim-lspconfig
      nvim-treesitter.withAllGrammars
      vim-bufferline
      tokyonight-nvim
      {
        plugin = which-key-nvim;
      }
    ];
  };
  programs.firefox = {
    profiles = {
      default = {
        enable = true;
    	  extensions = with pkgs.nur.repos.rycee.firefox-addons; [
    	    ublock-origin
    	    bitwarden
    	    darkreader
        ];
      };
    };
  };


   home.file."./.config/nvim/" = {
     source = ./nvim;
     recursive = true;
   };

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {

    # ".screenrc".source = dotfiles/screenrc;
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/traverseda/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };

  programs.home-manager.enable = true;
}
