{ config, pkgs, lib, appimageTools, ... }:

let
  {{if .rosapps }}
  ros = builtins.getFlake "github:lopsided98/nix-ros-overlay";
  {{ end }}
  {{if .guiapps}}
  plasma-manager = builtins.getFlake "github:pjones/plasma-manager";
  {{ end }}
  
  fromGitHub = ref: repo: pkgs.vimUtils.buildVimPlugin {
    pname = "${lib.strings.sanitizeDerivationName repo}";
    version = ref;
    src = builtins.fetchGit {
      url = "https://github.com/${repo}.git";
      ref = ref;
    };
  };
in
{
  imports = [
    {{if .guiapps}}(plasma-manager + "/modules"){{end}}
  ];

  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "{{.chezmoi.username}}";
  home.homeDirectory = "{{.chezmoi.homeDir}}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "23.11"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  #
  home.packages = [



    pkgs.htop
    pkgs.zsh
    pkgs.xclip
    pkgs.mosh
    pkgs.waypipe
    pkgs.pwgen
    pkgs.chezmoi
    pkgs.neovim-remote
    pkgs.pipx
    pkgs.rclone
    pkgs.pyright
    pkgs.mosh
    pkgs.jq
    pkgs.copier
    pkgs.pv
    pkgs.poetry
    pkgs.nmap
    pkgs.dig

    {{ if .rosapps }}
    ros.legacyPackages.x86_64-linux.noetic.rostopic
    {{ if .guiapps}}
    (with ros.legacyPackages.x86_64-linux.noetic; pkgs.lowPrio (buildEnv {
      paths = [
        rostopic
        rqt-gui
        rqt-gui-py
        rqt
      ];
    }))
    {{ end }}
    {{ end }}

    {{ if .guiapps}}
    (pkgs.nerdfonts.override { fonts = [ "FiraCode" "DroidSansMono" "Hack"]; })
    pkgs.openscad
    pkgs.firefox
    pkgs.logseq
    pkgs.wl-clipboard
    pkgs.nextcloud-client
    pkgs.vscodium
    pkgs.inkscape
    pkgs.blender
    pkgs.gimp
    pkgs.krita
    pkgs.qgroundcontrol
    pkgs.signal-desktop
    pkgs.element-desktop
    #Logitech peripheral management
    pkgs.solaar
    pkgs.libreoffice-qt
    pkgs.hunspell
    pkgs.hunspellDicts.en_CA
    pkgs.hunspellDicts.en_US

    pkgs.krdc
    (pkgs.appimageTools.wrapType2
      {
        name = "creality-print";
        src = pkgs.fetchurl {
          url = "https://file2-cdn.creality.com/file/05a4538e0c7222ce547eb8d58ef0251e/Creality_Print-v4.3.7.6627-x86_64-Release.AppImage";
          sha256 = "sha256-WUsL7UbxSY94H4F1Ww8vLsfRyeg2/DZ+V4B6eH3M6+M=";
        };
    })

    {{ end }}
    # ros.legacyPackages.x86_64-linux.noetic.rqt-gui
    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    #This script lets us work with stuff where we need wait for vim to 
    # exit, like `git commit`
    (pkgs.writeShellScriptBin "nvr-edit" ''
      nvr --remote-wait $@
    '')

    {{ if .nvidia_prime }}
    (pkgs.writeShellScriptBin "nvidia-offload" ''
      export __NV_PRIME_RENDER_OFFLOAD=1
      export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
      export __GLX_VENDOR_LIBRARY_NAME=nvidia
      export __VK_LAYER_NV_optimus=NVIDIA_only
      exec "$@"
    '')
    {{ end }}

    #This script lets you add any file to a git repo
    #(pkgs.writeshellscriptbin "sys-git" ''
    #  git -c status.showuntrackedfiles=no --git-dir={{.chezmoi.homeDir}}/.sys-git-repo --work-tree=/ $@
    #'')

  ];

  programs.git = {
    enable = true;
    lfs.enable = true;
    userEmail = "traverse.da@gmail.com";
    userName = "Alex Davies";
    extraConfig = {
      oh-my-zsh = {
        "hide-dirty" = "1";
      };
      init = {
        defaultBranch = "main";
      };
      credential = {
        helper = "cache";
      };
    };    
  };

  programs.zsh = {
    enable = true;
    enableCompletion = true;
    enableAutosuggestions = true;
    syntaxHighlighting.enable = true;

    history.size = 10000;
    history.path = "${config.xdg.dataHome}/zsh/history";
    oh-my-zsh = {
      enable = true;
      plugins = [ "git" "docker" "docker-compose"];
      theme = "robbyrussell";
    };
    initExtra = ''
    if [[ -n ''${NVIM+x} ]]; then
      alias vim="nvr --remote"
      export EDITOR=nvr-edit
    fi
    '';
  };


  programs.neovim = {
    enable = true;
    defaultEditor = true;
    viAlias = true;
    vimAlias = true;
    vimdiffAlias = true;
    plugins = with pkgs.vimPlugins; [
      nvim-lspconfig
      nvim-treesitter.withAllGrammars
      vim-bufferline
      tokyonight-nvim
      {
        plugin = which-key-nvim;
      }
    ];
  };
  programs.firefox = {
    policies = {
        Preferences = {
          "widget.use-xdg-desktop-portal.file-picker" = 1;
        };
    };
  };


  home.file."./.config/nvim/" = {
    source = ./nvim;
    recursive = true;
  };

  {{ if .guiapps }}
  services.kdeconnect.enable = true;


  programs.plasma = {
    enable = true;
    workspace = {
      theme = "breeze-dark";
      colorScheme = "BreezeDark";
    };
    shortcuts = {
      "services.org.kde.konsole.desktop"."NewWindow" = "Meta+Return";
      "kwin"."Window Close" = ["Meta+Shift+C" "Alt+F4"];
      "kwin"."Cube" = "Meta+C";
    };
    shortcuts.plasmashell = {
      "activate task manager entry 1" = "";
      "activate task manager entry 2" = "";
      "activate task manager entry 3" = "";
      "activate task manager entry 4" = "";
      "activate task manager entry 5" = "";
      "activate task manager entry 6" = "";
      "activate task manager entry 7" = "";
      "activate task manager entry 8" = "";
      "activate task manager entry 9" = "";
    };
    shortcuts.kwin = {
      "Switch to Desktop 1" = "Meta+1"; 
      "Window to Desktop 1" = "Meta+!";
      "Switch to Desktop 2" = "Meta+2"; 
      "Window to Desktop 2" = "Meta+@";
      "Switch to Desktop 3" = "Meta+3"; 
      "Window to Desktop 3" = "Meta+#";
      "Switch to Desktop 4" = "Meta+4"; 
      "Window to Desktop 4" = "Meta+$";
      "Switch to Desktop 5" = "Meta+5"; 
      "Window to Desktop 5" = "Meta+%";
      "Switch to Desktop 6" = "Meta+6"; 
      "Window to Desktop 6" = "Meta+^";
      "Switch to Desktop 7" = "Meta+7"; 
      "Window to Desktop 7" = "Meta+&";
      "Switch to Desktop 8" = "Meta+8"; 
      "Window to Desktop 8" = "Meta+*";
      "Switch to Desktop 9" = "Meta+9"; 
      "Window to Desktop 9" = "Meta+(";
      "Switch to Desktop 10" = "Meta+0"; 
      "Window to Desktop 10" = "Meta+)";
    };
    configFile = {
      "kwinrc"."Desktops"."Number" = 10;
      "kwinrc"."Desktops"."Rows" = 2;
    };
  };
  {{ end }}

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {

    # ".screenrc".source = dotfiles/screenrc;
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/traverseda/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    LOCALE_ARCHIVE = "/usr/lib/locale/locale-archive";
    LC_ALL = "en_US.UTF-8";
    # EDITOR = "emacs";
  };

  programs.home-manager.enable = true;
}
